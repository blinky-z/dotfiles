[core]
    eol = lf
    autocrlf = input
    excludesfile = ~/.gitignore
    filemode = false
    pager = delta
[alias]
    # verbose log
	l = log --stat --graph --decorate
    ll = l
	# oneline log
	lo = log --graph --pretty='%C(auto)%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%an>%Creset'
    ls = lo

    filelog = log -u
    fl = filelog

    last = ll -1
    # Find very first commit
    first = rev-list --max-parents=0 HEAD

    # shows only "labeled" commits (tags or branch heads)
    structure = log --oneline --simplify-by-decoration --graph --all
	
	refl = reflog --relative-date

	# View the current working tree status using the short format.
	s = status

    # show a diff of the last commit
    d = diff --cached HEAD^

    sl = stash list
    sa = stash apply
    sp = !git stash push --include-untracked --message="$1"

	# Pull in remote changes for the current repository and all its submodules.
	p = pull --recurse-submodules

	# Clone a repository including all submodules.
	c = clone --recursive

	# Commit all changes.
	ca = !git add ':(exclude,attr:builtin_objectmode=160000)' && git commit -av

	# Switch to a branch, creating it if necessary.
	go = "!f() { git checkout -b \"$1\" 2>/dev/null || git checkout \"$1\"; }; f"

	# Show verbose output about tags, branches or remotes
	tags = tag -l
	branches = branch --all
	remotes = remote --verbose

	# Amend the currently staged files to the latest commit.
	amend = commit --amend --reuse-message=HEAD

	untrack = rm --cached

	unadd = restore --staged

    # what would be merged
    incoming = log HEAD..@{upstream}

    # what would be pushed
    outgoing = log @{upstream}..HEAD
    outgoing = log @{u}..
   
	# Interactive rebase to the specific commit or using a number of last commits
    reb = "!r() { if [ -z $1 ]; then echo 'Please provide a number of commits or a specific hash'; return 1; fi; case $1 in *[!0-9]*) git rebase -i $1 ;; *) git rebase -i HEAD~$1 ;; esac; }; r"

	# Remove the old tag with this name and tag the latest commit with it.
	retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

	# Find branches containing commit
	fb = "!f() { git branch -a --contains $1; }; f"

	# Find tags containing commit
	ft = "!f() { git describe --always --contains $1; }; f"

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

	# Remove branches that have already been merged with main.
	# a.k.a. ‘delete merged’
	dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

	# List contributors with number of commits.
	contributors = shortlog --summary --numbered

	# Show the user email for the current repository.
	whoami = config user.email

	squash-all = "!s() { git reset $(git commit-tree 'HEAD^{tree}' -m 'Initial commit'); }; s"

	# List aliases.
	aliases = config --get-regexp alias
[merge]
    conflictstyle = zdiff3
[include]
    # these configs should contain only work or personal-related config
    # they're excluded from the dotfiles repo
    path = ~/.gitconfig_personal
    path = ~/.gitconfig_work
[apply]
	# Detect whitespace errors when applying a patch
	whitespace = fix
[branch]
	# Show most recently changed branches first.
	sort = -committerdate
[push]
	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple
	# Make `git push` push relevant annotated tags when pushing branches out.
	followTags = true
[interactive]
    diffFilter = delta --color-only
[diff]
	# Detect copies as well as renames
	renames = copies
[help]
	format = man
	# suggest correct commands
	autocorrect = 0
[delta]
    navigate = true  # use n and N to move between diff sections
    side-by-side = false
    line-numbers = true
    hyperlinks = true
    hyperlinks-file-link-format = "code://file/{path}:{line}"
    theme = Monokai Extended

